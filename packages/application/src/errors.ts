export type APIError = ErrorT<'api'> & {
	type: APIErrorType | undefined
}

export type WalletError = ErrorT<'wallet'>

export type NodeError = ErrorT<'node'>

export type ErrorT<T extends 'api' | 'node' | 'wallet'> = {
	cause: T extends 'api'
		? APIErrorCause
		: T extends 'node'
		? NodeErrorCause
		: T extends 'wallet'
		? WalletErrorCause
		: unknown
	category: T extends 'api'
		? ErrorCategory.API
		: T extends 'node'
		? ErrorCategory.NODE
		: T extends 'wallet'
		? ErrorCategory.WALLET
		: unknown
	message: string | undefined
}

export enum ErrorCategory {
	NODE = 'node',
	WALLET = 'wallet',
	API = 'api',
}

export enum WalletErrorCause {
	LOAD_KEYSTORE_FAILED = 'LOAD_KEYSTORE_FAILED',
}

export enum NodeErrorCause {
	GET_NODE_FAILED = 'GET_NODE_FAILED',
}

export type APIErrorObject = { code: number; message: string }

enum APIErrorType {
	ERROR_CALL_DATA = 'ERROR_CALL_DATA',
	ERROR_CONSTRAINT_VIOLATION = 'ERROR_CONSTRAINT_VIOLATION',
	ERROR_DEFAULT_SYSTEM_LOAN = 'ERROR_DEFAULT_SYSTEM_LOAN',
	ERROR_DELEGATION_NOT_ALLOWED = 'ERROR_DELEGATION_NOT_ALLOWED',
	ERROR_INVALID_HASHED_KEY = 'ERROR_INVALID_HASHED_KEY',
	ERROR_INVALID_PERMISSION = 'ERROR_INVALID_PERMISSION',
	ERROR_INVALID_RESOURCE = 'ERROR_INVALID_RESOURCE',
	ERROR_INVALID_VIRTUAL_SUBSTATE = 'ERROR_INVALID_VIRTUAL_SUBSTATE',
	ERROR_LOCAL_SUBSTATE_NOT_FOUND = 'ERROR_LOCAL_SUBSTATE_NOT_FOUND',
	ERROR_MINIMUM_STAKE = 'ERROR_MINIMUM_STAKE',
	ERROR_MISMATCH = 'ERROR_MISMATCH',
	ERROR_MISSING_PROCEDURE = 'ERROR_MISSING_PROCEDURE',
	ERROR_MULTIPLE_FEE_RESERVE_DEPOSIT = 'ERROR_MULTIPLE_FEE_RESERVE_DEPOSIT',
	ERROR_NOT_AUTHORIZED = 'ERROR_NOT_AUTHORIZED',
	ERROR_NOT_A_RESOURCE = 'ERROR_NOT_A_RESOURCE',
	ERROR_NOT_ENOUGH_RESERVE = 'ERROR_NOT_ENOUGH_RESERVE',
	ERROR_NOT_ENOUGH_RESOURCES = 'ERROR_NOT_ENOUGH_RESOURCES',
	ERROR_PROCEDURE = 'ERROR_PROCEDURE',
	ERROR_RESERVED_SYMBOL = 'ERROR_RESERVED_SYMBOL',
	ERROR_RESERVE_NOT_EMPTY = 'ERROR_RESERVE_NOT_EMPTY',
	ERROR_RESOURCE_ALLOCATION_AND_DESTRUCTION = 'ERROR_RESOURCE_ALLOCATION_AND_DESTRUCTION',
	ERROR_SIGNED_SYSTEM = 'ERROR_SIGNED_SYSTEM',
	ERROR_SUBSTATE_NOT_FOUND = 'ERROR_SUBSTATE_NOT_FOUND',
	ERROR_VIRTUAL_PARENT_STATE_DOES_NOT_EXIST = 'ERROR_VIRTUAL_PARENT_STATE_DOES_NOT_EXIST',
	ERROR_VIRTUAL_SUBSTATE_ALREADY_DOWN = 'ERROR_VIRTUAL_SUBSTATE_ALREADY_DOWN',
	INVALID_ACCOUNT_ADDRESS = 'INVALID_ACCOUNT_ADDRESS',
	INVALID_ACTION_DATA = 'INVALID_ACTION_DATA',
	INVALID_AID_LENGTH = 'INVALID_AID_LENGTH',
	INVALID_AID_STRING = 'INVALID_AID_STRING',
	INVALID_PAGE_SIZE = 'INVALID_PAGE_SIZE',
	INVALID_PUBLIC_KEY = 'INVALID_PUBLIC_KEY',
	INVALID_RESOURCE_ADDRESS = 'INVALID_RESOURCE_ADDRESS',
	INVALID_SIGNATURE_DER = 'INVALID_SIGNATURE_DER',
	INVALID_TX_ID = 'INVALID_TX_ID',
	INVALID_VALIDATOR_ADDRESS = 'INVALID_VALIDATOR_ADDRESS',
	INVALID_VALUE_OUT_OF_RANGE = 'INVALID_VALUE_OUT_OF_RANGE',
	MISSING_ACTION_FIELD = 'MISSING_ACTION_FIELD',
	MISSING_PARAMETER = 'MISSING_PARAMETER',
	MUST_MATCH_TX_ID = 'MUST_MATCH_TX_ID',
	UNABLE_TO_ADD_TO_MEMPOOL = 'UNABLE_TO_ADD_TO_MEMPOOL',
	UNABLE_TO_MAKE_SIGNATURE_RECOVERABLE = 'UNABLE_TO_MAKE_SIGNATURE_RECOVERABLE',
	UNABLE_TO_PARSE_BOOLEAN = 'UNABLE_TO_PARSE_BOOLEAN',
	UNABLE_TO_PARSE_FLOAT = 'UNABLE_TO_PARSE_FLOAT',
	UNABLE_TO_PARSE_HEX_STRING = 'UNABLE_TO_PARSE_HEX_STRING',
	UNABLE_TO_PARSE_INT = 'UNABLE_TO_PARSE_INT',
	UNABLE_TO_PARSE_UINT = 'UNABLE_TO_PARSE_UINT',
	UNABLE_TO_PREPARE_TX = 'UNABLE_TO_PREPARE_TX',
	UNABLE_TO_SUBMIT_TX = 'UNABLE_TO_SUBMIT_TX',
	UNKNOWN_ACTION = 'UNKNOWN_ACTION',
	UNKNOWN_RRI = 'UNKNOWN_RRI',
	UNKNOWN_TX_ID = 'UNKNOWN_TX_ID',
	UNSUPPORTED_ACTION = 'UNSUPPORTED_ACTION',
}

const ErrorCode: Record<number, APIErrorType> = {
	1100: APIErrorType.ERROR_CALL_DATA,
	1101: APIErrorType.ERROR_CONSTRAINT_VIOLATION,
	1102: APIErrorType.ERROR_DEFAULT_SYSTEM_LOAN,
	1103: APIErrorType.ERROR_DELEGATION_NOT_ALLOWED,
	1104: APIErrorType.ERROR_INVALID_HASHED_KEY,
	1105: APIErrorType.ERROR_INVALID_PERMISSION,
	1106: APIErrorType.ERROR_INVALID_RESOURCE,
	1107: APIErrorType.ERROR_INVALID_VIRTUAL_SUBSTATE,
	1108: APIErrorType.ERROR_LOCAL_SUBSTATE_NOT_FOUND,
	1109: APIErrorType.ERROR_MINIMUM_STAKE,
	1110: APIErrorType.ERROR_MISMATCH,
	1111: APIErrorType.ERROR_MISSING_PROCEDURE,
	1112: APIErrorType.ERROR_MULTIPLE_FEE_RESERVE_DEPOSIT,
	1113: APIErrorType.ERROR_NOT_AUTHORIZED,
	1114: APIErrorType.ERROR_NOT_A_RESOURCE,
	1115: APIErrorType.ERROR_NOT_ENOUGH_RESERVE,
	1116: APIErrorType.ERROR_NOT_ENOUGH_RESOURCES,
	1117: APIErrorType.ERROR_PROCEDURE,
	1118: APIErrorType.ERROR_RESERVED_SYMBOL,
	1119: APIErrorType.ERROR_RESERVE_NOT_EMPTY,
	1120: APIErrorType.ERROR_RESOURCE_ALLOCATION_AND_DESTRUCTION,
	1121: APIErrorType.ERROR_SIGNED_SYSTEM,
	1122: APIErrorType.ERROR_SUBSTATE_NOT_FOUND,
	1123: APIErrorType.ERROR_VIRTUAL_PARENT_STATE_DOES_NOT_EXIST,
	1124: APIErrorType.ERROR_VIRTUAL_SUBSTATE_ALREADY_DOWN,
	1200: APIErrorType.INVALID_ACCOUNT_ADDRESS,
	1201: APIErrorType.INVALID_ACTION_DATA,
	1202: APIErrorType.INVALID_AID_LENGTH,
	1203: APIErrorType.INVALID_AID_STRING,
	1204: APIErrorType.INVALID_PAGE_SIZE,
	1205: APIErrorType.INVALID_PUBLIC_KEY,
	1206: APIErrorType.INVALID_RESOURCE_ADDRESS,
	1207: APIErrorType.INVALID_SIGNATURE_DER,
	1208: APIErrorType.INVALID_TX_ID,
	1209: APIErrorType.INVALID_VALIDATOR_ADDRESS,
	1210: APIErrorType.INVALID_VALUE_OUT_OF_RANGE,
	1300: APIErrorType.MISSING_ACTION_FIELD,
	1301: APIErrorType.MISSING_PARAMETER,
	1400: APIErrorType.MUST_MATCH_TX_ID,
	1500: APIErrorType.UNABLE_TO_ADD_TO_MEMPOOL,
	1502: APIErrorType.UNABLE_TO_MAKE_SIGNATURE_RECOVERABLE,
	1503: APIErrorType.UNABLE_TO_PARSE_BOOLEAN,
	1504: APIErrorType.UNABLE_TO_PARSE_FLOAT,
	1505: APIErrorType.UNABLE_TO_PARSE_HEX_STRING,
	1506: APIErrorType.UNABLE_TO_PARSE_INT,
	1507: APIErrorType.UNABLE_TO_PARSE_UINT,
	1508: APIErrorType.UNABLE_TO_PREPARE_TX,
	1510: APIErrorType.UNABLE_TO_SUBMIT_TX,
	1511: APIErrorType.UNKNOWN_ACTION,
	1513: APIErrorType.UNKNOWN_RRI,
	1514: APIErrorType.UNKNOWN_TX_ID,
	1515: APIErrorType.UNSUPPORTED_ACTION,
}

export enum APIErrorCause {
	TOKEN_BALANCES_FAILED = 'TOKEN_BALANCES_FAILED',
	TRANSACTION_HISTORY_FAILED = 'TRANSACTION_HISTORY_FAILED',
	NATIVE_TOKEN_FAILED = 'NATIVE_TOKEN_FAILED',
	TOKEN_INFO_FAILED = 'TOKEN_INFO_FAILED',
	STAKES_FOR_ADDRESS_FAILED = 'STAKES_FOR_ADDRESS_FAILED',
	UNSTAKES_FOR_ADDRESS_FAILED = 'UNSTAKES_FOR_ADDRESS_FAILED',
	TX_STATUS_FAILED = 'TX_STATUS_FAILED',
	NETWORK_TX_THROUGHPUT_FAILED = 'NETWORK_TX_THROUGHPUT_FAILED',
	NETWORK_TX_DEMAND_FAILED = 'NETWORK_TX_DEMAND_FAILED',
	LOOKUP_TX_FAILED = 'LOOKUP_TX_FAILED',
	LOOKUP_VALIDATOR_FAILED = 'LOOKUP_VALIDATOR_FAILED',
	VALIDATORS_FAILED = 'VALIDATORS_FAILED',
	BUILD_TRANSACTION_FAILED = 'BUILD_TRANSACTION_FAILED',
	SUBMIT_SIGNED_TX_FAILED = 'SUBMIT_SIGNED_TX_FAILED',
	FINALIZE_TX_FAILED = 'FINALIZE_TX_FAILED',
	NETWORK_ID_FAILED = 'NETWORK_ID_FAILED',
}

const APIError = (cause: APIErrorCause) => (
	error: APIErrorObject,
): APIError => ({
	cause,
	category: ErrorCategory.API,
	type: error ? ErrorCode[Math.abs(error.code)] : undefined,
	message: error ? error.message : undefined,
})

export const nodeError = (error: Error): ErrorT<'node'> => ({
	cause: NodeErrorCause.GET_NODE_FAILED,
	category: ErrorCategory.NODE,
	message: error.message,
})

export const walletError = (error: Error): ErrorT<'wallet'> => ({
	cause: WalletErrorCause.LOAD_KEYSTORE_FAILED,
	category: ErrorCategory.WALLET,
	message: error.message,
})

export const tokenBalancesErr = APIError(APIErrorCause.TOKEN_BALANCES_FAILED)
export const transactionHistoryErr = APIError(
	APIErrorCause.TRANSACTION_HISTORY_FAILED,
)
export const nativeTokenErr = APIError(APIErrorCause.NATIVE_TOKEN_FAILED)
export const tokenInfoErr = APIError(APIErrorCause.TOKEN_INFO_FAILED)
export const stakesForAddressErr = APIError(
	APIErrorCause.STAKES_FOR_ADDRESS_FAILED,
)
export const unstakesForAddressErr = APIError(
	APIErrorCause.UNSTAKES_FOR_ADDRESS_FAILED,
)
export const txStatusErr = APIError(APIErrorCause.TX_STATUS_FAILED)
export const NetworkTxThroughputErr = APIError(
	APIErrorCause.NETWORK_TX_THROUGHPUT_FAILED,
)
export const NetworkTxDemandErr = APIError(
	APIErrorCause.NETWORK_TX_DEMAND_FAILED,
)
export const buildTxFromIntentErr = (error: APIErrorObject): APIError =>
	APIError(APIErrorCause.BUILD_TRANSACTION_FAILED)(error)

export const submitSignedTxErr = APIError(APIErrorCause.SUBMIT_SIGNED_TX_FAILED)
export const finalizeTxErr = APIError(APIErrorCause.FINALIZE_TX_FAILED)

export const networkIdErr = APIError(APIErrorCause.NETWORK_ID_FAILED)

export const lookupTxErr = APIError(APIErrorCause.LOOKUP_TX_FAILED)

export const lookupValidatorErr = APIError(
	APIErrorCause.LOOKUP_VALIDATOR_FAILED,
)

export const validatorsErr = APIError(APIErrorCause.VALIDATORS_FAILED)
