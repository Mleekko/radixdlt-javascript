/* tslint:disable */
/* eslint-disable */
/**
 * Wallet/Explorer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountBalancesRequest,
    AccountBalancesRequestFromJSON,
    AccountBalancesRequestToJSON,
    AccountBalancesResponse,
    AccountBalancesResponseFromJSON,
    AccountBalancesResponseToJSON,
    AccountStakesRequest,
    AccountStakesRequestFromJSON,
    AccountStakesRequestToJSON,
    AccountStakesResponse,
    AccountStakesResponseFromJSON,
    AccountStakesResponseToJSON,
    AccountTransactionsRequest,
    AccountTransactionsRequestFromJSON,
    AccountTransactionsRequestToJSON,
    AccountTransactionsResponse,
    AccountTransactionsResponseFromJSON,
    AccountTransactionsResponseToJSON,
    AccountUnstakesRequest,
    AccountUnstakesRequestFromJSON,
    AccountUnstakesRequestToJSON,
    AccountUnstakesResponse,
    AccountUnstakesResponseFromJSON,
    AccountUnstakesResponseToJSON,
    ConstructionBuildRequest,
    ConstructionBuildRequestFromJSON,
    ConstructionBuildRequestToJSON,
    ConstructionBuildResponse,
    ConstructionBuildResponseFromJSON,
    ConstructionBuildResponseToJSON,
    ConstructionFinalizeRequest,
    ConstructionFinalizeRequestFromJSON,
    ConstructionFinalizeRequestToJSON,
    ConstructionFinalizeResponse,
    ConstructionFinalizeResponseFromJSON,
    ConstructionFinalizeResponseToJSON,
    ConstructionSubmitRequest,
    ConstructionSubmitRequestFromJSON,
    ConstructionSubmitRequestToJSON,
    ConstructionSubmitResponse,
    ConstructionSubmitResponseFromJSON,
    ConstructionSubmitResponseToJSON,
    ConstructionSubmitUnexpectedError,
    ConstructionSubmitUnexpectedErrorFromJSON,
    ConstructionSubmitUnexpectedErrorToJSON,
    NetworkResponse,
    NetworkResponseFromJSON,
    NetworkResponseToJSON,
    TokenInfoRequest,
    TokenInfoRequestFromJSON,
    TokenInfoRequestToJSON,
    TokenInfoResponse,
    TokenInfoResponseFromJSON,
    TokenInfoResponseToJSON,
    TransactionInfoRequest,
    TransactionInfoRequestFromJSON,
    TransactionInfoRequestToJSON,
    TransactionInfoResponse,
    TransactionInfoResponseFromJSON,
    TransactionInfoResponseToJSON,
    TransactionStatusRequest,
    TransactionStatusRequestFromJSON,
    TransactionStatusRequestToJSON,
    TransactionStatusResponse,
    TransactionStatusResponseFromJSON,
    TransactionStatusResponseToJSON,
    UnexpectedError,
    UnexpectedErrorFromJSON,
    UnexpectedErrorToJSON,
    ValidatorInfoRequest,
    ValidatorInfoRequestFromJSON,
    ValidatorInfoRequestToJSON,
    ValidatorInfoResponse,
    ValidatorInfoResponseFromJSON,
    ValidatorInfoResponseToJSON,
    ValidatorsRequest,
    ValidatorsRequestFromJSON,
    ValidatorsRequestToJSON,
    ValidatorsResponse,
    ValidatorsResponseFromJSON,
    ValidatorsResponseToJSON,
} from '../models';

export interface AccountBalancesPostRequest {
    accountBalancesRequest: AccountBalancesRequest;
}

export interface AccountStakesPostRequest {
    accountStakesRequest: AccountStakesRequest;
}

export interface AccountTransactionsPostRequest {
    accountTransactionsRequest: AccountTransactionsRequest;
}

export interface AccountUnstakesPostRequest {
    accountUnstakesRequest: AccountUnstakesRequest;
}

export interface ConstructionBuildPostRequest {
    constructionBuildRequest: ConstructionBuildRequest;
}

export interface ConstructionFinalizePostRequest {
    constructionFinalizeRequest: ConstructionFinalizeRequest;
}

export interface ConstructionSubmitPostRequest {
    constructionSubmitRequest: ConstructionSubmitRequest;
}

export interface NetworkPostRequest {
    body: object;
}

export interface TokenPostRequest {
    tokenInfoRequest: TokenInfoRequest;
}

export interface TransactionPostRequest {
    transactionInfoRequest: TransactionInfoRequest;
}

export interface TransactionStatusPostRequest {
    transactionStatusRequest: TransactionStatusRequest;
}

export interface ValidatorPostRequest {
    validatorInfoRequest: ValidatorInfoRequest;
}

export interface ValidatorsPostRequest {
    validatorsRequest: ValidatorsRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get Token Balances
     */
    async accountBalancesPostRaw(requestParameters: AccountBalancesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AccountBalancesResponse>> {
        if (requestParameters.accountBalancesRequest === null || requestParameters.accountBalancesRequest === undefined) {
            throw new runtime.RequiredError('accountBalancesRequest','Required parameter requestParameters.accountBalancesRequest was null or undefined when calling accountBalancesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/balances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountBalancesRequestToJSON(requestParameters.accountBalancesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountBalancesResponseFromJSON(jsonValue));
    }

    /**
     * Get Token Balances
     */
    async accountBalancesPost(requestParameters: AccountBalancesPostRequest, initOverrides?: RequestInit): Promise<AccountBalancesResponse> {
        const response = await this.accountBalancesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Stake Positions
     */
    async accountStakesPostRaw(requestParameters: AccountStakesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AccountStakesResponse>> {
        if (requestParameters.accountStakesRequest === null || requestParameters.accountStakesRequest === undefined) {
            throw new runtime.RequiredError('accountStakesRequest','Required parameter requestParameters.accountStakesRequest was null or undefined when calling accountStakesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/stakes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountStakesRequestToJSON(requestParameters.accountStakesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountStakesResponseFromJSON(jsonValue));
    }

    /**
     * Get Stake Positions
     */
    async accountStakesPost(requestParameters: AccountStakesPostRequest, initOverrides?: RequestInit): Promise<AccountStakesResponse> {
        const response = await this.accountStakesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Account Transactions
     */
    async accountTransactionsPostRaw(requestParameters: AccountTransactionsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AccountTransactionsResponse>> {
        if (requestParameters.accountTransactionsRequest === null || requestParameters.accountTransactionsRequest === undefined) {
            throw new runtime.RequiredError('accountTransactionsRequest','Required parameter requestParameters.accountTransactionsRequest was null or undefined when calling accountTransactionsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/transactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountTransactionsRequestToJSON(requestParameters.accountTransactionsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountTransactionsResponseFromJSON(jsonValue));
    }

    /**
     * Get Account Transactions
     */
    async accountTransactionsPost(requestParameters: AccountTransactionsPostRequest, initOverrides?: RequestInit): Promise<AccountTransactionsResponse> {
        const response = await this.accountTransactionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Unstake Positions
     */
    async accountUnstakesPostRaw(requestParameters: AccountUnstakesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AccountUnstakesResponse>> {
        if (requestParameters.accountUnstakesRequest === null || requestParameters.accountUnstakesRequest === undefined) {
            throw new runtime.RequiredError('accountUnstakesRequest','Required parameter requestParameters.accountUnstakesRequest was null or undefined when calling accountUnstakesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/account/unstakes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountUnstakesRequestToJSON(requestParameters.accountUnstakesRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountUnstakesResponseFromJSON(jsonValue));
    }

    /**
     * Get Unstake Positions
     */
    async accountUnstakesPost(requestParameters: AccountUnstakesPostRequest, initOverrides?: RequestInit): Promise<AccountUnstakesResponse> {
        const response = await this.accountUnstakesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Build Transaction
     */
    async constructionBuildPostRaw(requestParameters: ConstructionBuildPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ConstructionBuildResponse>> {
        if (requestParameters.constructionBuildRequest === null || requestParameters.constructionBuildRequest === undefined) {
            throw new runtime.RequiredError('constructionBuildRequest','Required parameter requestParameters.constructionBuildRequest was null or undefined when calling constructionBuildPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/construction/build`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConstructionBuildRequestToJSON(requestParameters.constructionBuildRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstructionBuildResponseFromJSON(jsonValue));
    }

    /**
     * Build Transaction
     */
    async constructionBuildPost(requestParameters: ConstructionBuildPostRequest, initOverrides?: RequestInit): Promise<ConstructionBuildResponse> {
        const response = await this.constructionBuildPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Finalize Transaction
     */
    async constructionFinalizePostRaw(requestParameters: ConstructionFinalizePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ConstructionFinalizeResponse>> {
        if (requestParameters.constructionFinalizeRequest === null || requestParameters.constructionFinalizeRequest === undefined) {
            throw new runtime.RequiredError('constructionFinalizeRequest','Required parameter requestParameters.constructionFinalizeRequest was null or undefined when calling constructionFinalizePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/construction/finalize`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConstructionFinalizeRequestToJSON(requestParameters.constructionFinalizeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstructionFinalizeResponseFromJSON(jsonValue));
    }

    /**
     * Finalize Transaction
     */
    async constructionFinalizePost(requestParameters: ConstructionFinalizePostRequest, initOverrides?: RequestInit): Promise<ConstructionFinalizeResponse> {
        const response = await this.constructionFinalizePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submit Transaction
     */
    async constructionSubmitPostRaw(requestParameters: ConstructionSubmitPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ConstructionSubmitResponse>> {
        if (requestParameters.constructionSubmitRequest === null || requestParameters.constructionSubmitRequest === undefined) {
            throw new runtime.RequiredError('constructionSubmitRequest','Required parameter requestParameters.constructionSubmitRequest was null or undefined when calling constructionSubmitPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/construction/submit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConstructionSubmitRequestToJSON(requestParameters.constructionSubmitRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConstructionSubmitResponseFromJSON(jsonValue));
    }

    /**
     * Submit Transaction
     */
    async constructionSubmitPost(requestParameters: ConstructionSubmitPostRequest, initOverrides?: RequestInit): Promise<ConstructionSubmitResponse> {
        const response = await this.constructionSubmitPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Network
     */
    async networkPostRaw(requestParameters: NetworkPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NetworkResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling networkPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/network`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NetworkResponseFromJSON(jsonValue));
    }

    /**
     * Get Network
     */
    async networkPost(requestParameters: NetworkPostRequest, initOverrides?: RequestInit): Promise<NetworkResponse> {
        const response = await this.networkPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Token Info
     */
    async tokenPostRaw(requestParameters: TokenPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TokenInfoResponse>> {
        if (requestParameters.tokenInfoRequest === null || requestParameters.tokenInfoRequest === undefined) {
            throw new runtime.RequiredError('tokenInfoRequest','Required parameter requestParameters.tokenInfoRequest was null or undefined when calling tokenPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenInfoRequestToJSON(requestParameters.tokenInfoRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenInfoResponseFromJSON(jsonValue));
    }

    /**
     * Get Token Info
     */
    async tokenPost(requestParameters: TokenPostRequest, initOverrides?: RequestInit): Promise<TokenInfoResponse> {
        const response = await this.tokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Transaction Info
     */
    async transactionPostRaw(requestParameters: TransactionPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TransactionInfoResponse>> {
        if (requestParameters.transactionInfoRequest === null || requestParameters.transactionInfoRequest === undefined) {
            throw new runtime.RequiredError('transactionInfoRequest','Required parameter requestParameters.transactionInfoRequest was null or undefined when calling transactionPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionInfoRequestToJSON(requestParameters.transactionInfoRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionInfoResponseFromJSON(jsonValue));
    }

    /**
     * Get Transaction Info
     */
    async transactionPost(requestParameters: TransactionPostRequest, initOverrides?: RequestInit): Promise<TransactionInfoResponse> {
        const response = await this.transactionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Transaction Status
     */
    async transactionStatusPostRaw(requestParameters: TransactionStatusPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TransactionStatusResponse>> {
        if (requestParameters.transactionStatusRequest === null || requestParameters.transactionStatusRequest === undefined) {
            throw new runtime.RequiredError('transactionStatusRequest','Required parameter requestParameters.transactionStatusRequest was null or undefined when calling transactionStatusPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction/status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionStatusRequestToJSON(requestParameters.transactionStatusRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionStatusResponseFromJSON(jsonValue));
    }

    /**
     * Get Transaction Status
     */
    async transactionStatusPost(requestParameters: TransactionStatusPostRequest, initOverrides?: RequestInit): Promise<TransactionStatusResponse> {
        const response = await this.transactionStatusPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Validator Info
     */
    async validatorPostRaw(requestParameters: ValidatorPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ValidatorInfoResponse>> {
        if (requestParameters.validatorInfoRequest === null || requestParameters.validatorInfoRequest === undefined) {
            throw new runtime.RequiredError('validatorInfoRequest','Required parameter requestParameters.validatorInfoRequest was null or undefined when calling validatorPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/validator`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ValidatorInfoRequestToJSON(requestParameters.validatorInfoRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatorInfoResponseFromJSON(jsonValue));
    }

    /**
     * Get Validator Info
     */
    async validatorPost(requestParameters: ValidatorPostRequest, initOverrides?: RequestInit): Promise<ValidatorInfoResponse> {
        const response = await this.validatorPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Validators
     */
    async validatorsPostRaw(requestParameters: ValidatorsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ValidatorsResponse>> {
        if (requestParameters.validatorsRequest === null || requestParameters.validatorsRequest === undefined) {
            throw new runtime.RequiredError('validatorsRequest','Required parameter requestParameters.validatorsRequest was null or undefined when calling validatorsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/validators`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ValidatorsRequestToJSON(requestParameters.validatorsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatorsResponseFromJSON(jsonValue));
    }

    /**
     * Get Validators
     */
    async validatorsPost(requestParameters: ValidatorsPostRequest, initOverrides?: RequestInit): Promise<ValidatorsResponse> {
        const response = await this.validatorsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
