/* tslint:disable */
/* eslint-disable */
/**
 * Wallet/Explorer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
     ConstructionBuildErrorAboveMaximumRakeIncreaseFromJSONTyped,
     ConstructionBuildErrorMinimumStakeFromJSONTyped,
     ConstructionBuildErrorCouldNotConstructFeesFromJSONTyped,
     ConstructionBuildErrorInvalidStakePermissionsFromJSONTyped,
     ConstructionBuildErrorMessageTooLongFromJSONTyped,
     ConstructionBuildErrorNotEnoughResourcesFromJSONTyped
} from './';

/**
 * 
 * @export
 * @interface ConstructionBuildError
 */
export interface ConstructionBuildError {
    /**
     * 
     * @type {string}
     * @memberof ConstructionBuildError
     */
    errorType: string;
}

export function ConstructionBuildErrorFromJSON(json: any): ConstructionBuildError {
    return ConstructionBuildErrorFromJSONTyped(json, false);
}

export function ConstructionBuildErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConstructionBuildError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['errorType'] === 'ABOVE_MAXIMUM_RAKE_INCREASE') {
            return ConstructionBuildErrorAboveMaximumRakeIncreaseFromJSONTyped(json, true);
        }
        if (json['errorType'] === 'BELOW_MINIMUM_STAKE') {
            return ConstructionBuildErrorMinimumStakeFromJSONTyped(json, true);
        }
        if (json['errorType'] === 'COULD_NOT_CONSTRUCT_FEES') {
            return ConstructionBuildErrorCouldNotConstructFeesFromJSONTyped(json, true);
        }
        if (json['errorType'] === 'INVALID_STAKE_PERMISSIONS') {
            return ConstructionBuildErrorInvalidStakePermissionsFromJSONTyped(json, true);
        }
        if (json['errorType'] === 'MESSAGE_TOO_LONG') {
            return ConstructionBuildErrorMessageTooLongFromJSONTyped(json, true);
        }
        if (json['errorType'] === 'NOT_ENOUGH_RESOURCES') {
            return ConstructionBuildErrorNotEnoughResourcesFromJSONTyped(json, true);
        }
    }
    return {
        
        'errorType': json['errorType'],
    };
}

export function ConstructionBuildErrorToJSON(value?: ConstructionBuildError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'errorType': value.errorType,
    };
}

